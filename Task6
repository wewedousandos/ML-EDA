{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1d42f9a2-25b3-49e8-a111-6a8d514b6a4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (3.10.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (4.55.8)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (1.4.8)\n",
      "Requirement already satisfied: numpy>=1.23 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (2.2.2)\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (3.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib) (2.9.0.post0)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n",
      "Requirement already satisfied: pandas in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (2.2.3)\n",
      "Requirement already satisfied: numpy>=1.23.2 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas) (2.2.2)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas) (2025.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
      "Requirement already satisfied: numpy in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (2.2.2)\n",
      "Requirement already satisfied: seaborn in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (0.13.2)\n",
      "Requirement already satisfied: numpy!=1.24.0,>=1.20 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from seaborn) (2.2.2)\n",
      "Requirement already satisfied: pandas>=1.2 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from seaborn) (2.2.3)\n",
      "Requirement already satisfied: matplotlib!=3.6.1,>=3.4 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from seaborn) (3.10.0)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.3.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (0.12.1)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (4.55.8)\n",
      "Requirement already satisfied: kiwisolver>=1.3.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (1.4.8)\n",
      "Requirement already satisfied: packaging>=20.0 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (24.2)\n",
      "Requirement already satisfied: pillow>=8 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (11.1.0)\n",
      "Requirement already satisfied: pyparsing>=2.3.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (3.2.1)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from matplotlib!=3.6.1,>=3.4->seaborn) (2.9.0.post0)\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from pandas>=1.2->seaborn) (2025.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/anaconda3/envs/ML/lib/python3.11/site-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.4->seaborn) (1.17.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib\n",
    "!pip install pandas \n",
    "!pip install numpy\n",
    "!pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4d548d24-a645-4bcd-8de2-db3c122b3bb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as plot\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "dc89c598-6f41-411a-8a30-a77a6d0c314d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"GenZ_DatingApp_Data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "62ea8f6e-e77f-432b-bf6b-b8dd73964407",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 16 columns):\n",
      " #   Column                   Non-Null Count  Dtype \n",
      "---  ------                   --------------  ----- \n",
      " 0   User_ID                  500 non-null    int64 \n",
      " 1   Age                      500 non-null    int64 \n",
      " 2   Gender                   500 non-null    object\n",
      " 3   Location                 500 non-null    object\n",
      " 4   Education                500 non-null    object\n",
      " 5   Occupation               500 non-null    object\n",
      " 6   Primary_App              393 non-null    object\n",
      " 7   Secondary_Apps           386 non-null    object\n",
      " 8   Usage_Frequency          500 non-null    object\n",
      " 9   Daily_Usage_Time         500 non-null    object\n",
      " 10  Reason_for_Using         500 non-null    object\n",
      " 11  Satisfaction             500 non-null    int64 \n",
      " 12  Challenges               383 non-null    object\n",
      " 13  Desired_Features         500 non-null    object\n",
      " 14  Preferred_Communication  500 non-null    object\n",
      " 15  Partner_Priorities       500 non-null    object\n",
      "dtypes: int64(3), object(13)\n",
      "memory usage: 62.6+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e08fd561-18c7-47c3-b73b-8afdd63fa4c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e3b7a945-94bd-4def-be36-f68e00b5d463",
   "metadata": {},
   "outputs": [],
   "source": [
    "#how can we convert categorical data variable using One-Hot Encoding?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "be461c87-8637-4d2c-bd1c-f5b217b27383",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "date = pd.read_csv('cleaned_Data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2bc8302b-7b97-4bd1-9fc7-f374d78ca97e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Gender_Male  Gender_Non-binary  Location_Chennai  Location_Delhi  \\\n",
      "0          0.0                1.0               0.0             0.0   \n",
      "1          0.0                0.0               0.0             1.0   \n",
      "2          0.0                1.0               0.0             0.0   \n",
      "3          0.0                1.0               0.0             1.0   \n",
      "4          1.0                0.0               0.0             1.0   \n",
      "\n",
      "   Location_Hyderabad  Location_Kolkata  Location_Mumbai  Location_Pune  \\\n",
      "0                 0.0               0.0              0.0            0.0   \n",
      "1                 0.0               0.0              0.0            0.0   \n",
      "2                 0.0               1.0              0.0            0.0   \n",
      "3                 0.0               0.0              0.0            0.0   \n",
      "4                 0.0               0.0              0.0            0.0   \n",
      "\n",
      "   Education_Full-time Job  Education_Intern  ...  Challenges_Time-Wasting  \\\n",
      "0                      0.0               0.0  ...                      0.0   \n",
      "1                      0.0               0.0  ...                      1.0   \n",
      "2                      0.0               1.0  ...                      0.0   \n",
      "3                      1.0               0.0  ...                      0.0   \n",
      "4                      0.0               1.0  ...                      0.0   \n",
      "\n",
      "   Challenges_nan  Desired_Features_Audio Calls  \\\n",
      "0             0.0                           1.0   \n",
      "1             0.0                           0.0   \n",
      "2             0.0                           0.0   \n",
      "3             1.0                           0.0   \n",
      "4             0.0                           0.0   \n",
      "\n",
      "   Desired_Features_Detailed Profiles  \\\n",
      "0                                 0.0   \n",
      "1                                 0.0   \n",
      "2                                 1.0   \n",
      "3                                 0.0   \n",
      "4                                 0.0   \n",
      "\n",
      "   Desired_Features_Location-Based Matching  Desired_Features_Video Calls  \\\n",
      "0                                       0.0                           0.0   \n",
      "1                                       0.0                           1.0   \n",
      "2                                       0.0                           0.0   \n",
      "3                                       0.0                           0.0   \n",
      "4                                       0.0                           1.0   \n",
      "\n",
      "   Preferred_Communication_Video Calls  Preferred_Communication_Voice Notes  \\\n",
      "0                                  1.0                                  0.0   \n",
      "1                                  0.0                                  0.0   \n",
      "2                                  0.0                                  0.0   \n",
      "3                                  0.0                                  1.0   \n",
      "4                                  0.0                                  0.0   \n",
      "\n",
      "   Partner_Priorities_Personality > Interests > Values  \\\n",
      "0                                                0.0     \n",
      "1                                                0.0     \n",
      "2                                                0.0     \n",
      "3                                                1.0     \n",
      "4                                                0.0     \n",
      "\n",
      "   Partner_Priorities_Values > Personality > Appearance  \n",
      "0                                                1.0     \n",
      "1                                                1.0     \n",
      "2                                                1.0     \n",
      "3                                                0.0     \n",
      "4                                                0.0     \n",
      "\n",
      "[5 rows x 40 columns]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "\n",
    "categorical_columns = ['Gender', 'Location', 'Education', 'Occupation', 'Primary_App', 'Secondary_Apps', \n",
    "                       'Usage_Frequency', 'Reason_for_Using', 'Challenges', 'Desired_Features', \n",
    "                       'Preferred_Communication', 'Partner_Priorities']\n",
    "\n",
    "\n",
    "one_hot_encoder = OneHotEncoder(sparse_output=False, drop='first')\n",
    "encoded_categorical = one_hot_encoder.fit_transform(date[categorical_columns])\n",
    "\n",
    "\n",
    "encoded_date = pd.DataFrame(encoded_categorical, columns=one_hot_encoder.get_feature_names_out(categorical_columns))\n",
    "\n",
    "\n",
    "print(encoded_date.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e5293d49-8eab-471f-8529-9aa9f918cc6c",
   "metadata": {},
   "outputs": [],
   "source": [
    "date['Daily_Usage_Time'] = date['Daily_Usage_Time'].replace({\n",
    "    '30 minutes': 0.5, \n",
    "    '1 hour': 1, \n",
    "    '1.5 hours': 1.5, \n",
    "    '2 hours': 2, \n",
    "    '2.5 hours': 2.5,\n",
    "    '3 hours': 3\n",
    "}).infer_objects(copy=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "60d0ee07-04b5-4527-879f-363decc4e389",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        Age  Daily_Usage_Time  Satisfaction\n",
      "0  0.285714               0.2          0.75\n",
      "1  0.857143               0.0          1.00\n",
      "2  0.857143               0.6          0.75\n",
      "3  0.571429               0.0          0.50\n",
      "4  0.000000               0.6          0.75\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "\n",
    "date['Daily_Usage_Time'] = date['Daily_Usage_Time'].replace({\n",
    "    '30 minutes': 0.5, \n",
    "    '1 hour': 1, \n",
    "    '1.5 hours': 1.5, \n",
    "    '2 hours': 2, \n",
    "    '2.5 hours': 2.5,\n",
    "    '3 hours': 3\n",
    "}).infer_objects(copy=False)\n",
    "\n",
    "\n",
    "numerical_columns = ['Age', 'Daily_Usage_Time', 'Satisfaction']\n",
    "\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "\n",
    "normalized_numerical = scaler.fit_transform(date[numerical_columns])\n",
    "\n",
    "normalized_date = pd.DataFrame(normalized_numerical, columns=numerical_columns)\n",
    "\n",
    "print(normalized_date.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6a613bd6-be6a-4e0b-918a-282a119c9b9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Primary_App Secondary_Apps  Active_App_Count\n",
      "0       hinge          hinge                 2\n",
      "1       hinge        okcupid                 2\n",
      "2         nan            nan                 2\n",
      "3         nan        okcupid                 2\n",
      "4     okcupid        okcupid                 2\n"
     ]
    }
   ],
   "source": [
    "\n",
    "date['Primary_App'] = date['Primary_App'].astype(str).str.lower().fillna('none')\n",
    "date['Secondary_Apps'] = date['Secondary_Apps'].astype(str).str.lower().fillna('none')\n",
    "\n",
    "\n",
    "date['Active_App_Count'] = date.apply(\n",
    "    lambda row: 2 if row['Primary_App'] != 'none' and row['Secondary_Apps'] != 'none'\n",
    "    else 1 if row['Primary_App'] != 'none' or row['Secondary_Apps'] != 'none'\n",
    "    else 0,\n",
    "    axis=1\n",
    ")\n",
    "\n",
    "\n",
    "print(date[['Primary_App', 'Secondary_Apps', 'Active_App_Count']].head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e844457-7687-4842-8949-3e19cef05770",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
